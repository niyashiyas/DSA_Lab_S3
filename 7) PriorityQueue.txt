#include <stdio.h>
#include <stdlib.h>
#define MAX 50
 
void insert(int);
void delete(int);
void create();
void check(int);
void display();
 
int prique[MAX];
int front, rear;
 
void main() {
    int n, ch;
 
    printf("\n1 - Insert an element into queue");
    printf("\n2 - Delete an element from queue");
    printf("\n3 - Display queue elements");
    printf("\n4 - Exit");
 
    create();
 
    while (1) {
        printf("\nEnter your choice : ");    
        scanf("%d", &ch);
 
        switch (ch) {
        case 1: 
            printf("\nEnter value to be inserted : ");
            scanf("%d",&n);
            insert(n);
            break;
        case 2:
            printf("\nEnter value to delete : ");
            scanf("%d",&n);
            delete(n);
            break;
        case 3: 
            display();
            break;
        case 4: 
            exit(0);
        default: 
            printf("\nChoice is incorrect, Enter a correct choice");
        }
    }
}
 
void create() {
    front = rear = -1;
}
 
void insert(int data) {
    if (rear >= MAX - 1) {
        printf("\nQueue overflow");
        return;
    }
    if ((front == -1) && (rear == -1)) {
        front++;
        rear++;
        prique[rear] = data;
        return;
    }    
    else
        check(data);
    rear++;
}
 
void check(int data) {
    int i,j;
    for (i = 0; i <= rear; i++) {
        if (data >= prique[i]) {
            for (j = rear + 1; j > i; j--) {
                prique[j] = prique[j - 1];
            }
            prique[i] = data;
            return;
        }
    }
    prique[i] = data;
}
 
void delete(int data) {
    int i;
    if ((front==-1) && (rear==-1)) {
        printf("\nQueue is empty");
        return;
    }
 
    for (i = 0; i <= rear; i++) {
        if (data == prique[i]) {
            for (; i < rear; i++) {
                prique[i] = prique[i + 1];
            }
        prique[i] = -99;
        rear--;
        if (rear == -1) 
            front = -1;
        return;
        }
    }
    printf("\n%d not found in queue to delete", data);
}
 
void display() {
    if ((front == -1) && (rear == -1)) {
        printf("\nQueue is empty");
        return;
    }
    for (; front <= rear; front++) {
        printf(" %d ", prique[front]);
    }
    front = 0;
}